#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <150>;
};

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

&sk { lazy; };

/ {
    behaviors {

        kt_off: key_toggle_off_only {
            compatible = "zmk,behavior-key-toggle";
            #binding-cells = <1>;
            display-name = "Key Toggle Off";
            toggle-mode = "off";
        };


        ssp__urob__hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 24 25 26 7 22 36 45 46 47 37 38 39 40 41 8 9 10 11 12 23 24 25 26 27 42 43 44>;
            hold-trigger-on-release;
        };

        ssp__urob__hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <14 15 16 17 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47>;
            hold-trigger-on-release;
        };

        ssp__left_paren_lt: ssp__left_paren_lt {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ssp__right_paren_gt: ssp__right_paren_gt {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ssp__colon_semi: ssp__colon_semi {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        urob__leader_1: urob__leader_1 {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            prs {
                sequence = <P R>;
                bindings = <&kp PRINTSCREEN>;
            };

            nav {
                sequence = <SPACE>;
                bindings = <&to 9>;
            };

            med {
                sequence = <TAB>;
                bindings = <&to 4>;
            };

            cap {
                sequence = <COLON>;
                bindings = <&caps_word>;
            };

            win {
                sequence = <A>;
                bindings = <&kt LWIN>;
            };

            alt {
                sequence = <S>;
                bindings = <&kt LALT>;
            };

            ctl {
                sequence = <D>;
                bindings = <&kt LCTRL>;
            };

            sft {
                sequence = <F>;
                bindings = <&kt LSHFT>;
            };
        };

        urob__leader_2: urob__leader_2 {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            winoff {
                sequence = <A>;
                bindings = <&kt_off LWIN>;
            };

            altoff {
                sequence = <S>;
                bindings = <&kt_off LALT>;
            };

            ctloff {
                sequence = <D>;
                bindings = <&kt_off LCTRL>;
            };

            sftoff {
                sequence = <F>;
                bindings = <&kt_off LSHFT>;
            };
        };

        ssp__sk_hold_tap: sk_hold_tap {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&sk>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    combos {
        compatible = "zmk,combos";

        lb {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <37 38>;
        };

        rb {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <38 39>;
        };

        lplt {
            bindings = <&ssp__left_paren_lt>;
            key-positions = <23 24>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        rplt {
            bindings = <&ssp__right_paren_gt>;
            key-positions = <24 25>;
            timeout-ms = <50>;
            require-prior-idle-ms = <50>;
        };

        lbootloader {
            bindings = <&bootloader>;
            key-positions = <0 28>;
        };

        cancel {
            bindings = <&to 0>;
            key-positions = <32 43>;
        };

        fun {
            bindings = <&to 7>;
            key-positions = <17 18>;
        };

        left_hand {
            bindings = <&to 1>;
            key-positions = <16 17>;
            layers = <0>;
            timeout-ms = <50>;
            require-prior-idle-ms = <25>;
        };

        leader_1 {
            bindings = <&urob__leader_1>;
            key-positions = <14 15>;
        };

        leader_2 {
            bindings = <&urob__leader_1>;
            key-positions = <29 30>;
        };

        // nav_auto_layer-combo {
        //     bindings = <&urob__auto_layer_nav 1>;
        //     key-positions = <33 18>;
        // };
        // num_auto_layer-combo {
        //     bindings = <&urob__auto_layer_num 4>;
        //     key-positions = <36 22>;
        // };
        // sym_auto_layer-combo {
        //     bindings = <&urob__auto_layer_sym 5>;
        //     key-positions = <23 37>;
        // };
        // fun_auto_layer-combo {
        //     bindings = <&urob__auto_layer_fun 6>;
        //     key-positions = <38 24>;
        // };
        // med_auto_layer-combo {
        //     bindings = <&urob__auto_layer_media 3>;
        //     key-positions = <16 31>;
        // };
    };

    keymap {
        compatible = "zmk,keymap";

        home {
            display-name = "home";
            bindings = <
&kp GRAVE         &kp Q                   &kp W                   &kp E                    &kp R                    &kp T                         &kp UP_ARROW             &kp Y        &kp U                    &kp I                    &kp O                   &kp P                     &kp EQUAL
&ssp__colon_semi  &ssp__urob__hml LWIN A  &ssp__urob__hml LALT S  &ssp__urob__hml LCTRL D  &ssp__urob__hml LSHFT F  &kp G               &kp LEFT  &tog 8        &kp RIGHT  &kp H        &ssp__urob__hmr LSHFT J  &ssp__urob__hmr LCTRL K  &ssp__urob__hmr LALT L  &ssp__urob__hmr LGUI SQT  &kp MINUS
&urob__leader_1   &kp Z                   &kp X                   &kp C                    &kp V                    &kp B      &to 1              &kp DOWN                 &kp N        &kp M                    &kp COMMA                &kp DOT                 &kp FSLH                  &kp BACKSLASH
                                                                  &lt 4 ESCAPE             &lt 2 SPACE              &lt 3 TAB                                              &lt 6 ENTER  &lt 5 BACKSPACE          &lt 7 DELETE
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        left {
            bindings = <
&kp EQUAL  &kp P                     &kp O                   &kp I                    &kp U                    &kp Y                         &trans          &trans  &trans  &trans  &trans  &trans  &trans
&kp MINUS  &ssp__urob__hmr LGUI SQT  &ssp__urob__hmr LALT L  &ssp__urob__hmr LCTRL K  &ssp__urob__hmr LSHFT J  &kp H                 &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&kp BSLH   &kp FSLH                  &kp DOT                 &kp COMMA                &kp M                    &kp N        &to 0            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                                                             &lt 7 DELETE             &lt 5 BACKSPACE          &lt 6 ENTER                                   &trans  &trans  &trans
            >;

            label = "left";
        };

        lm {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &trans      &kp HOME       &kp UP_ARROW  &kp END        &trans     &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans           &trans  &trans  &trans  &kp CAPS    &kp LEFT       &kp DOWN      &kp RIGHT      &kp RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &kp INSERT  &kp PAGE_UP    &trans        &kp PAGE_DOWN  &trans     &trans
                            &trans     &trans     &trans                                   &kp ENTER   &kp BACKSPACE  &kp DELETE
            >;

            label = "nav";
        };

        lr {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &kp LC(Y)  &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)        &trans
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans           &trans  &trans  &trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                            &trans     &trans     &trans                                   &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;

            label = "mouse";
        };

        ll {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_EFF   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI
&trans  &sk LGUI  &sk LALT  &sk LCTRL  &sk LSHFT  &trans           &trans  &trans  &trans  &trans           &kp C_PREVIOUS    &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT       &bt BT_CLR
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans           &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4
                            &trans     &trans     &trans                                   &kp C_STOP       &kp C_PLAY_PAUSE  &kp C_MUTE
            >;

            label = "media";
        };

        rm {
            bindings = <
&trans  &trans   &kp N7  &kp N8  &kp N9  &trans                     &kp PAGE_UP             &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp N0   &kp N4  &kp N5  &kp N6  &trans           &kp HOME  &trans         &kp END  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp DOT  &kp N1  &kp N2  &kp N3  &trans  &to 0              &kp PAGE_DOWN           &trans  &trans     &trans     &trans    &trans    &trans
                         &trans  &trans  &trans                                             &trans  &trans     &trans
            >;

            label = "num";
            sensor-bindings = <&inc_dec_kp DOWN UP_ARROW>;
        };

        rl {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                   &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                  &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                    &trans  &trans     &trans
            >;

            label = "sym";
        };

        rr {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8      &kp F9     &kp PSCRN                         &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK            &trans  &trans  &trans  &trans  &sk LSHFT  &sk LCTRL  &sk LALT  &sk LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2      &kp F3     &kp PAUSE_BREAK  &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                         &kp C_MENU  &kp SPACE  &kp TAB                                           &trans  &trans     &trans
            >;

            label = "fun";
        };

        b {
            bindings = <
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(Z))                  &none         &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
&none  &sk LGUI   &sk LALT   &sk LCTRL  &sk LSHFT  &none                   &none  &none  &none  &none          &sk LSHFT  &sk LCTRL  &sk LALT   &sk LGUI   &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)      &to 0           &none         &kp LC(Y)      &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
                             &mkp MCLK  &mkp LCLK  &mkp RCLK                                    &mkp RCLK      &mkp LCLK  &mkp MCLK
            >;

            label = "button";
        };

        lnav {
            bindings = <
&trans  &trans  &kp HOME   &kp UP      &kp END    &trans                      &trans          &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp LEFT   &kp DOWN    &kp RIGHT  &kp CAPS            &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &kp PG_UP  &trans      &kp PG_DN  &kp INS    &to 0            &trans          &trans  &trans  &trans  &trans  &trans  &trans
                           &kp DELETE  &kp BSPC   &kp ENTER                                   &trans  &trans  &trans
            >;

            label = "l_nav";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
