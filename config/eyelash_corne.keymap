#define ZMK_POINTING_DEFAULT_MOVE_VAL 1200  // 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 25   // 10

#include <input/processors.dtsi>
#include <zephyr/dt-bindings/input/input-event-codes.h>
#include "combo.dtsi"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>
#include <dt-bindings/zmk/rgb.h>

&mmv_input_listener { input-processors = <&zip_xy_scaler 2 1>; };

&msc_input_listener { input-processors = <&zip_scroll_scaler 2 1>; };

&msc {
    acceleration-exponent = <1>;      // 0
    time-to-max-speed-ms = <100>;       // 300
    delay-ms = <0>;                   // 0
};

&mmv {
    time-to-max-speed-ms = <500>;
    acceleration-exponent = <1>;
    trigger-period-ms = <16>;
};

&lt {
    flavor = "hold-preferred";
    quick-tap-ms = <150>;
};

&mt {
    flavor = "tap-preferred";
    require-prior-idle-ms = <125>;
};

/ {
    behaviors {
        eye__td0: eye__td0 {
            compatible = "zmk,behavior-tap-dance";
            display-name = "Shift/Caps Lock Tap Dance";
            #binding-cells = <0>;
            bindings = <&kp LEFT_SHIFT>, <&kp CAPS>;
        };

        ssp__urob__hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <23 24 25 26 7 22 36 45 46 47 37 38 39 40 41 8 9 10 11 12 23 24 25 26 27 42 43 44>;
            hold-trigger-on-release;
        };

        ssp__urob__hmr: ssp__urob__hmr {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            require-prior-idle-ms = <150>;
            flavor = "balanced";
            hold-trigger-key-positions = <14 15 16 17 0 1 2 3 4 5 13 14 15 16 17 18 28 29 30 31 32 33 42 43 44 45 46 47>;
            hold-trigger-on-release;
        };

        ssp__left_paren_lt: ssp__left_paren_lt {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LESS_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ssp__right_paren_gt: ssp__right_paren_gt {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GREATER_THAN>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        ssp__colon_semi: ssp__colon_semi {
            compatible = "zmk,behavior-mod-morph";
            bindings = <&kp COLON>, <&kp SEMICOLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT)>;
        };

        urob__leader_1: urob__leader_1 {
            compatible = "zmk,behavior-leader-key";
            #binding-cells = <0>;

            prs {
                sequence = <P R>;
                bindings = <&kp PRINTSCREEN>;
            };

            med {
                sequence = <M E>;
                bindings = <&to 3>;
            };
        };

        urob__auto_layer_nav: urob__auto_layer_nav {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT DOWN UP RIGHT PG_DN PG_UP HOME END>;
            ignore-modifiers;
        };

        urob__auto_layer_media: urob__auto_layer_media {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <C_PREVIOUS C_VOL_DN C_VOL_UP C_NEXT BT_CLR BT_SEL 0 BT_SEL 1 BT_SEL 2 BT_SEL 3 BT_SEL 4 C_STOP C_PLAY_PAUSE C_MUTE>;
            ignore-modifiers;
        };

        urob__auto_layer_sym: urob__auto_layer_sym {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LEFT_BRACE AMPERSAND ASTERISK LEFT_PARENTHESIS RIGHT_BRACE COLON DOLLAR PERCENT CARET PLUS LSHFT LCTRL LALT LGUI TILDE EXCLAMATION AT_SIGN HASH PIPE LEFT_PARENTHESIS RIGHT_PARENTHESIS UNDERSCORE>;
            ignore-modifiers;
        };

        urob__auto_layer_num: urob__auto_layer_num {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <LBKT N7 N8 N9 RBKT SEMI N4 N5 N6 EQUAL LSHFT LCTRL LALT LGUI GRAVE N1 N2 N3 BSLH PERIOD N0 MINUS>;
            ignore-modifiers;
        };

        urob__auto_layer_fun: urob__auto_layer_fun {
            compatible = "zmk,behavior-auto-layer";
            #binding-cells = <1>;
            continue-list = <F12 F7 F8 F9 PSCRN F11 F4 F5 F6 SCROLLLOCK LSHFT LCTRL LALT LGUI F10 F1 F2 F3 PAUSE_BREAK C_MENU SPACE TAB>;
            ignore-modifiers;
        };

        tap_hold__nav: tap_hold__nav {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&urob__auto_layer_nav>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        tap_hold__num: tap_hold__num {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&urob__auto_layer_num>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        tap_hold__sym: tap_hold__sym {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&urob__auto_layer_sym>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        tap_hold__media: tap_hold__media {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&urob__auto_layer_sym>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };

        tap_hold__fun: tap_hold__fun {
            compatible = "zmk,behavior-hold-tap";
            bindings = <&urob__auto_layer_sym>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
        };
    };

    rgb_encoder: rgb_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&rgb_ug RGB_BRI>, <&rgb_ug RGB_BRD>;
    };

    scroll_encoder: scroll_encoder {
        compatible = "zmk,behavior-sensor-rotate";
        #sensor-binding-cells = <0>;
        bindings = <&msc SCRL_DOWN>, <&msc SCRL_UP>;

        tap-ms = <30>;
    };

    keymap {
        compatible = "zmk,keymap";

        m0 {
            display-name = "home";
            bindings = <
&kp GRAVE         &kp Q                   &kp W                   &kp E                    &kp R                    &kp T                         &kp PG_UP           &kp Y        &kp U                    &kp I                    &kp O                   &kp P                     &kp EQUAL
&ssp__colon_semi  &ssp__urob__hml LWIN A  &ssp__urob__hml LALT S  &ssp__urob__hml LCTRL D  &ssp__urob__hml LSHFT F  &kp G               &kp HOME  &tog 7     &kp END  &kp H        &ssp__urob__hmr LSHFT J  &ssp__urob__hmr LCTRL K  &ssp__urob__hmr LALT L  &ssp__urob__hmr LGUI SQT  &kp MINUS
&urob__leader_1   &kp Z                   &kp X                   &kp C                    &kp V                    &kp B      &to 0              &kp PG_DN           &kp N        &kp M                    &kp COMMA                &kp DOT                 &kp FSLH                  &kp BACKSLASH
                                                                  &lt 3 ESC                &tap_hold__nav 0 SPACE   &lt 2 TAB                                         &lt 5 ENTER  &lt 4 BACKSPACE          &lt 6 DELETE
            >;

            sensor-bindings = <&inc_dec_kp RIGHT LEFT>;
        };

        lm {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &trans      &trans         &trans      &trans     &trans     &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &kp CAPS    &kp LEFT       &kp DOWN    &kp UP     &kp RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &kp INSERT  &kp HOME       &kp PG_DN   &kp PG_UP  &kp END    &trans
                            &trans     &trans     &trans                                   &kp ENTER   &kp BACKSPACE  &kp DELETE
            >;

            label = "nav";
        };

        lr {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &kp LC(Y)  &kp LC(V)       &kp LC(C)       &kp LC(X)     &kp LC(Z)        &trans
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans     &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans     &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT  &trans
                            &trans     &trans     &trans                                   &mkp RCLK  &mkp LCLK       &mkp MCLK
            >;

            label = "mouse";
        };

        ll {
            bindings = <
&trans  &trans    &trans    &trans     &trans     &trans                   &trans          &rgb_ug RGB_TOG  &rgb_ug RGB_EFF   &rgb_ug RGB_HUI  &rgb_ug RGB_SAI  &rgb_ug RGB_SPI  &rgb_ug RGB_BRI
&trans  &kp LGUI  &kp LALT  &kp LCTRL  &kp LSHFT  &trans           &trans  &trans  &trans  &trans           &kp C_PREVIOUS    &kp C_VOL_DN     &kp C_VOL_UP     &kp C_NEXT       &bt BT_CLR
&trans  &trans    &trans    &trans     &trans     &trans  &to 0            &trans          &trans           &bt BT_SEL 0      &bt BT_SEL 1     &bt BT_SEL 2     &bt BT_SEL 3     &bt BT_SEL 4
                            &trans     &trans     &trans                                   &kp C_STOP       &kp C_PLAY_PAUSE  &kp C_MUTE
            >;

            label = "media";
        };

        rm {
            bindings = <
&trans  &kp LBKT   &kp N7  &kp N8      &kp N9  &kp RBKT                    &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp SEMI   &kp N4  &kp N5      &kp N6  &kp EQUAL           &trans  &trans  &trans  &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp GRAVE  &kp N1  &kp N2      &kp N3  &kp BSLH   &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                           &kp PERIOD  &kp N0  &kp MINUS                                   &trans  &trans     &trans
            >;

            label = "num";
            sensor-bindings = <&inc_dec_kp DOWN UP_ARROW>;
        };

        rl {
            bindings = <
&trans  &kp LEFT_BRACE  &kp AMPERSAND    &kp ASTERISK          &kp LEFT_PARENTHESIS   &kp RIGHT_BRACE                   &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp COLON       &kp DOLLAR       &kp PERCENT           &kp CARET              &kp PLUS                  &trans  &trans  &trans  &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp TILDE       &kp EXCLAMATION  &kp AT_SIGN           &kp HASH               &kp PIPE         &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                                         &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp UNDERSCORE                                    &trans  &trans     &trans
            >;

            label = "sym";
        };

        rr {
            bindings = <
&trans  &kp F12  &kp F7  &kp F8      &kp F9     &kp PSCRN                         &trans          &trans  &trans     &trans     &trans    &trans    &trans
&trans  &kp F11  &kp F4  &kp F5      &kp F6     &kp SCROLLLOCK            &trans  &trans  &trans  &trans  &kp LSHFT  &kp LCTRL  &kp LALT  &kp LGUI  &trans
&trans  &kp F10  &kp F1  &kp F2      &kp F3     &kp PAUSE_BREAK  &to 0            &trans          &trans  &trans     &trans     &trans    &trans    &trans
                         &kp C_MENU  &kp SPACE  &kp TAB                                           &trans  &trans     &trans
            >;

            label = "fun";
        };

        b {
            bindings = <
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LS(LC(Z))                  &none         &kp LC(LS(Z))  &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
&none  &kp LGUI   &kp LALT   &kp LCTRL  &kp LSHFT  &none                   &none  &none  &none  &none          &kp LSHFT  &kp LCTRL  &kp LALT   &kp LGUI   &none
&none  &kp LC(Z)  &kp LC(X)  &kp LC(C)  &kp LC(V)  &kp LC(Y)      &to 0           &none         &kp LC(Y)      &kp LC(V)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &none
                             &mkp MCLK  &mkp LCLK  &mkp RCLK                                    &mkp RCLK      &mkp LCLK  &mkp MCLK
            >;

            label = "button";
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
